# -*- coding: utf-8 -*-
"""422_lab5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-p7nsC-ggTJ1zvbYRTeH_rkmK1WtJY20
"""

import numpy as np
import pandas as pd
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer

melanoma = pd.read_csv("/content/Melanoma TFRecords 256x256.csv")

melanoma.head(3)

melanoma.isnull().sum()

melanoma = melanoma.drop(['anatom_site_general_challenge'], axis = 1)
#melanoma.shape

impute = SimpleImputer(missing_values=np.nan, strategy='mean')

impute.fit(melanoma[['age_approx']])

melanoma['age_approx'] = impute.transform(melanoma[['age_approx']])

melanoma['benign_malignant'].unique()
melanoma['diagnosis'].unique()

from sklearn.preprocessing import LabelEncoder

enc = LabelEncoder()

melanoma['benign_malignant_enc'] = enc.fit_transform(melanoma['benign_malignant'])

melanoma['sex_enc'] = enc.fit_transform(melanoma['sex'])

print(melanoma[['benign_malignant', 'benign_malignant_enc']].head())
print(melanoma[['sex', 'sex_enc']].head())

category_enc = pd.get_dummies(melanoma['diagnosis'])
category_enc.head()

x = melanoma.drop(['image_name','target','patient_id','benign_malignant','sex','diagnosis'],axis=1)

y = melanoma.target
X_train, X_test, y_train, y_test = train_test_split(x, y,
                                                    random_state=1, test_size = 0.20, stratify= melanoma.target)
print(X_train.shape)
print(X_test.shape)

scaler = MinMaxScaler()

scaler.fit(X_train)

X_train_scaled = scaler.transform(X_train)

X_test_scaled = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train_scaled, y_train)
predictions = model.predict(X_test_scaled)
model_value = accuracy_score(y_test, predictions)
print(model_value)

clf = DecisionTreeClassifier(criterion='entropy',random_state=1)
clf.fit(X_train_scaled,Y_train)

y_pred = clf.predict(X_test_scaled)
y_pred = clf.predict(X_test_scaled)
score=accuracy_score(y_pred,Y_test)
print(score)

plt.bar(['Logistic Regression', 'Decision Tree Classification'],[model_value, score])
plt.title('Accuracy Comparison')
plt.show()