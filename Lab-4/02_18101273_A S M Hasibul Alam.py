# -*- coding: utf-8 -*-
"""422_lab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WyVVHGInn6g1z5sCitLdk57kHa7-WRYY
"""

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer

melanoma = pd.read_csv("/content/Melanoma TFRecords 256x256.csv")

melanoma.head(3)

melanoma.shape

melanoma.isnull().sum()

melanoma = melanoma.drop(['anatom_site_general_challenge'], axis = 1)
melanoma.shape

from sklearn.impute import SimpleImputer

impute = SimpleImputer(missing_values=np.nan, strategy='mean')

impute.fit(melanoma[['age_approx']])

melanoma['age_approx'] = impute.transform(melanoma[['age_approx']])

melanoma.shape

melanoma.info()

#melanoma['benign_malignant'].unique()
#melanoma['diagnosis'].unique()

from sklearn.preprocessing import LabelEncoder

enc = LabelEncoder()

melanoma['benign_malignant_enc'] = enc.fit_transform(melanoma['benign_malignant'])

melanoma['sex_enc'] = enc.fit_transform(melanoma['sex'])

print(melanoma[['benign_malignant', 'benign_malignant_enc']].head())
print(melanoma[['sex', 'sex_enc']].head())

category_enc = pd.get_dummies(melanoma['diagnosis'])
category_enc.head()

from sklearn.model_selection import train_test_split
x = melanoma.drop(['image_name','target','patient_id','benign_malignant','sex','diagnosis'],axis=1)

y = melanoma.target
X_train, X_test, y_train, y_test = train_test_split(x, y,
                                                    random_state=1, test_size = 0.25, stratify= melanoma.target)
print(X_train.shape)
print(X_test.shape)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaler.fit(X_train)

X_train_scaled = scaler.transform(X_train)

print("per-feature minimum before scaling:\n {}".format(X_train.min(axis=0)))
print("per-feature maximum before scaling:\n {}".format(X_train.max(axis=0)))

print("per-feature minimum after scaling:\n {}".format(
    X_train_scaled.min(axis=0)))
print("per-feature maximum after scaling:\n {}".format(
    X_train_scaled.max(axis=0)))

# transform test data
X_test_scaled = scaler.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier
X_train, X_test, y_train, y_test = train_test_split(x, y,
                                                    random_state=0)
knn=KNeighborsClassifier()

knn.fit(X_train, y_train)

print("Test set accuracy: {:.2f}".format(knn.score(X_test, y_test)))

# preprocessing using 0-1 scaling
scaler = MinMaxScaler()
scaler.fit(X_train)

X_train_scaled = scaler.transform(X_train)

X_test_scaled = scaler.transform(X_test)

#train
knn.fit(X_train_scaled, y_train)

# scoring on the scaled test set
print("Scaled test set accuracy: {:.2f}".format(
    knn.score(X_test_scaled, y_test)))

